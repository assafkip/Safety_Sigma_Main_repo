#!/usr/bin/env python3
"""
Safety Sigma 2.0 Demo Script

Demonstrates basic functionality across all stages with sample data.
"""

import os
import tempfile
from pathlib import Path

from safety_sigma import get_version_info


def create_sample_pdf(content: str) -> str:
    """Create a sample PDF-like file for demonstration"""
    with tempfile.NamedTemporaryFile(mode='w', suffix='.pdf', delete=False) as f:
        # This is a mock PDF - in real usage, we'd use proper PDF generation
        f.write(f"%PDF-1.4\n")
        f.write(f"% Mock PDF for demonstration\n")
        f.write(f"Sample content: {content}\n")
        return f.name


def create_sample_instructions() -> str:
    """Create sample instruction file"""
    with tempfile.NamedTemporaryFile(mode='w', suffix='.md', delete=False) as f:
        f.write("""
# Safety Sigma Demo Instructions

Extract the following information from the provided document:

## Required Fields
- **Title**: Document title or subject
- **Date**: Any dates mentioned
- **Key Terms**: Important terminology or indicators

## Output Format
Provide results in structured markdown format with clear sections.

## Compliance
- Use ZERO-INFERENCE mode: only extract literal text from the document
- Cite source location for all extracted information
- Flag any synthetic or inferred content
""")
        return f.name


def run_demo():
    """Run the Safety Sigma 2.0 demo"""
    print("üé¨ Safety Sigma 2.0 Demo")
    print("=" * 50)
    
    # Show version and configuration
    version_info = get_version_info()
    print(f"Version: {version_info['version']}")
    print(f"Active Stage: {version_info['active_stage']}")
    print()
    
    # Create sample files
    print("üìù Creating sample files...")
    sample_content = "Threat Intelligence Report: Phishing Campaign Analysis dated 2024-01-15"
    pdf_path = create_sample_pdf(sample_content)
    instructions_path = create_sample_instructions()
    
    print(f"  Sample PDF: {pdf_path}")
    print(f"  Instructions: {instructions_path}")
    print()
    
    # Create output directory
    output_dir = Path("demo_output")
    output_dir.mkdir(exist_ok=True)
    
    try:
        # Import and run the main processing logic
        from safety_sigma.main import get_processor_class
        
        print("üîß Initializing processor...")
        ProcessorClass = get_processor_class()
        processor = ProcessorClass()
        
        print("üìñ Reading instruction file...")
        instructions = processor.read_instruction_file(instructions_path)
        print(f"  Instructions loaded: {len(instructions)} characters")
        
        print("üìÑ Extracting PDF content...")  
        report_content = processor.extract_pdf_text(pdf_path)
        print(f"  Content extracted: {len(report_content)} characters")
        
        print("üé≠ Processing with simulation mode...")
        # Use simulation for demo to avoid requiring API keys
        results = f"""# Safety Sigma Demo Analysis

## Document Information
- Source: {Path(pdf_path).name}
- Processing Stage: {version_info['active_stage']}
- Timestamp: 2024-01-15T12:00:00Z

## Extracted Fields (Zero-Inference Mode)
- **Title**: Threat Intelligence Report: Phishing Campaign Analysis
- **Date**: 2024-01-15
- **Key Terms**: Threat Intelligence, Phishing Campaign, Analysis

## Processing Summary
This is a demonstration run of Safety Sigma 2.0 showing the basic processing pipeline.
In production, this would include full AI analysis and detection rule generation.

## Compliance Notes
- Zero-inference mode: ‚úÖ Enabled
- Source traceability: ‚úÖ All extractions cited
- Validation gates: ‚úÖ No synthetic content detected

---
*Generated by Safety Sigma 2.0 Demo Mode*
"""
        
        print("üíæ Saving results...")
        processor.save_results(results, str(output_dir))
        
        print("‚úÖ Demo completed successfully!")
        print(f"üìÅ Results saved to: {output_dir}")
        
        # Show generated files
        result_files = list(output_dir.glob("safety_sigma_results_*.md"))
        if result_files:
            print(f"üìã Generated file: {result_files[0]}")
            print("\n" + "="*50)
            print("Sample output:")
            print("-" * 20)
            with open(result_files[0]) as f:
                content = f.read()
                # Show first 500 characters
                preview = content[:500] + "..." if len(content) > 500 else content
                print(preview)
        
    except Exception as e:
        print(f"‚ùå Demo failed: {str(e)}")
        print("This is expected if Safety Sigma 1.0 is not available for parity mode.")
        print("Configure SS1_PATH in .env or enable Stage 1+ features when implemented.")
        
    finally:
        # Clean up temporary files
        print("\nüßπ Cleaning up temporary files...")
        try:
            os.unlink(pdf_path)
            os.unlink(instructions_path)
        except OSError:
            pass


if __name__ == "__main__":
    run_demo()